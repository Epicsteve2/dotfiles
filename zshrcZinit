# zstyle ':znap:*' repos-dir ~/code-monkey/zsh-snap
# source ~/code-monkey/zsh-snap/znap.zsh
# [[ -f ~/.zsh/.zsh-snap/znap.zsh ]] ||
#     git clone --depth 1 -- \
#         https://github.com/marlonrichert/zsh-snap.git ~/.zsh/.zsh-snap


# znap eval starship 'starship init zsh --print-full-init'
# znap prompt

# znap eval starship 'source ~/.p10k.zsh'
# znap prompt romkatv/powerlevel10k

# znap source zsh-users/zsh-autosuggestions
# znap source zsh-users/zsh-syntax-highlighting
# znap source marlonrichert/zsh-autocomplete
# znap source ohmyzsh/ohmyzsh
# znap source Aloxaf/fzf-tab
# znap source zsh-users/zsh-completions
# znap source romkatv/powerlevel10k
# znap eval zoxide "$(zoxide init zsh)"

## Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
# zinit light-mode for \
#     zdharma-continuum/zinit-annex-as-monitor \
#     zdharma-continuum/zinit-annex-bin-gem-node \
#     zdharma-continuum/zinit-annex-patch-dl \
#     zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh" # pull behavior same as clone, source init.zsh
zinit light starship/starship
# zinit ice depth=1; zinit light romkatv/powerlevel10k
zinit ice depth=1 wait"1" lucid; zinit light ajeetdsouza/zoxide
zinit ice wait"0a" lucid atload'_zsh_autosuggest_start'; zinit light zsh-users/zsh-autosuggestions
# zinit ice wait"0c" lucid atinit"zpcompinit;zpcdreplay"; zinit light zdharma-continuum/fast-syntax-highlighting
zinit ice wait"0a" lucid; zinit light zsh-users/zsh-syntax-highlighting
# zinit load marlonrichert/zsh-autocomplete
zinit ice wait"0a" lucid; zinit load Aloxaf/fzf-tab
zinit ice wait"0c" lucid blockf; zinit light zsh-users/zsh-completions
zinit ice wait"0c" lucid as"completion"; zinit snippet OMZ::plugins/docker-compose/_docker-compose
zinit ice wait"0c" lucid as"completion"; zinit snippet OMZ::plugins/docker/_docker
zinit ice wait"0c" lucid as"completion"; zinit snippet OMZ::plugins/pip/_pip
# zinit light chitoku-k/fzf-zsh-completions

# EXA
zinit ice wait"2" lucid from"gh-r" as"program" mv"bin/exa* -> exa"; zinit light ogham/exa
zinit ice wait blockf atpull'zinit creinstall -q .'
# DELTA
zinit ice lucid wait"0" as"program" from"gh-r" pick"delta*/delta"; zinit light 'dandavison/delta'
# DUST
zinit ice wait"2" lucid from"gh-r" as"program" mv"dust*/dust -> dust" pick"dust" atload"alias du=dust"; zinit light bootandy/dust
# DUF
zinit ice lucid wait"0" as"program" from"gh-r" bpick='*linux_amd64.deb' pick"usr/bin/duf" atload"alias df=duf"; zinit light muesli/duf
# BAT
zinit ice from"gh-r" as"program" mv"bat* -> bat" pick"bat/bat" atload"alias cat=bat"; zinit light sharkdp/bat
# BAT-EXTRAS
zinit ice wait"1" as"program" pick"src/batgrep.sh" lucid; zinit ice wait"1" as"program" pick"src/batdiff.sh" lucid
zinit light eth-p/bat-extras
alias bd=batdiff.sh
alias man=batman.sh
alias batgrep=batgrep.sh
# RIPGREP
zinit ice from"gh-r" as"program" mv"ripgrep* -> ripgrep" pick"ripgrep/rg"; zinit light BurntSushi/ripgrep
# FD
zinit ice as"command" from"gh-r" mv"fd* -> fd" pick"fd/fd"; zinit light sharkdp/fd
# FZF
zinit ice from"gh-r" as"command"; zinit light junegunn/fzf
zinit ice lucid wait'0c' multisrc"shell/{completion,key-bindings}.zsh" id-as"junegunn/fzf_completions" pick"/dev/null"; zinit light junegunn/fzf
# RANGER
zinit ice depth'1' as"program" pick"ranger.py"; zinit light ranger/ranger

superrg () {
    INITIAL_QUERY=""
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'" \
        fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --disabled --query "$INITIAL_QUERY" \
            --height=90% --layout=reverse
}

# export EDITOR='nvim'
# export VISUAL=$EDITOR
export PAGER='less'
export SHELL='/usr/bin/zsh'
# export LANG='it_IT.UTF-8'
# export LC_ALL='it_IT.UTF-8'
# export BAT_THEME="gruvbox-dark"

# eval "$(sheldon source)"


# `starship` binary as command, from github release

# znap source ajeetdsouza/zoxide
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f ~/.config/broot/launcher/bash/br ] && source /home/patrick/.config/broot/launcher/bash/br

# eval "$(starship init zsh)"
# eval "$(starship completions zsh)"

fzf-up-arrow-widget() {
  #Source https://github.com/junegunn/fzf/issues/477#issuecomment-631707533
  local extra_ctrl_r="--preview 'bat --color=always -pp -l zsh <<<{}' --preview-window down:3:wrap"

  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(fc -rl 1 | perl -ne 'print if !$seen{(/^\s*[0-9]+\**\s+(.*)/, $1)}++' |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore --expect=tab $extra_ctrl_r --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    local select=0
    if [[ $selected[1] == tab ]]; then
      select=1
      shift selected
    fi
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
      [[ $select == 0 ]] && zle accept-line
    fi
  fi
  zle reset-prompt
  return $ret
}
zle -N fzf-up-arrow-widget fzf-up-arrow-widget
bindkey "${terminfo[kcuu1]}" fzf-up-arrow-widget
bindkey "${key[Up]}" fzf-up-arrow-widget

# znap source romkatv/powerlevel10k
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "\C-h" backward-kill-word
bindkey "\e[3;5~" kill-word

aptu() {
  sudo apt update

  tput setaf 1 && echo "Listing..." && tput sgr0
  apt list --upgradable

  tput setaf 1 && echo "Upgrading..." && tput sgr0
  sudo apt upgrade
}

export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export LS_COLORS='no=0:rs=0:di=01;38;5;198:ln=01;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:ex=01;38;5;82:*.cmd=00;38;5;82:*.exe=00;38;5;82:*.com=00;38;5;82:*.btm=00;38;5;82:*.bat=00;38;5;82:*.jpg=00;38;5;37:*.jpeg=00;38;5;37:*.png=00;38;5;37:*.gif=00;38;5;37:*.bmp=00;38;5;37:*.xbm=00;38;5;37:*.xpm=00;38;5;37:*.tif=00;38;5;37:*.tiff=00;38;5;37:*.pdf=00;38;5;98:*.odf=00;38;5;98:*.doc=00;38;5;98:*.ppt=00;38;5;98:*.pptx=00;38;5;98:*.db=00;38;5;98:*.aac=00;38;5;208:*.au=00;38;5;208:*.flac=00;38;5;208:*.mid=00;38;5;208:*.midi=00;38;5;208:*.mka=00;38;5;208:*.mp3=00;38;5;208:*.mpc=00;38;5;208:*.ogg=00;38;5;208:*.ra=00;38;5;208:*.wav=00;38;5;208:*.m4a=00;38;5;208:*.axa=00;38;5;208:*.oga=00;38;5;208:*.spx=00;38;5;208:*.xspf=00;38;5;208:*.mov=01;38;5;208:*.mpg=01;38;5;208:*.mpeg=01;38;5;208:*.3gp=01;38;5;208:*.m2v=01;38;5;208:*.mkv=01;38;5;208:*.ogm=01;38;5;208:*.mp4=01;38;5;208:*.m4v=01;38;5;208:*.mp4v=01;38;5;208:*.vob=01;38;5;208:*.qt=01;38;5;208:*.nuv=01;38;5;208:*.wmv=01;38;5;208:*.asf=01;38;5;208:*.rm=01;38;5;208:*.rmvb=01;38;5;208:*.flc=01;38;5;208:*.avi=01;38;5;208:*.fli=01;38;5;208:*.flv=01;38;5;208:*.gl=01;38;5;208:*.m2ts=01;38;5;208:*.divx=01;38;5;208:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*~=00;38;5;240:*#=00;38;5;240:*.part=00;38;5;240:*.incomplete=00;38;5;240:*.swp=00;38;5;240:*.tmp=00;38;5;240:*.temp=00;38;5;240:*.o=00;38;5;240:*.pyc=00;38;5;240:*.class=00;38;5;240:*.cache=00;38;5;240:';
export EXA_COLORS="${LS_COLORS}"
export LSCOLORS=$LS_COLORS

export EDITOR=nano
export VISUAL=${EDITOR}

export HISTFILE="${HOME}/.history"
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE

# setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
# setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
# setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
# setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.


zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*:descriptions' format '[%d]'

# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'
zstyle ':fzf-tab:*' fzf-bindings 'shift-tab:accept'
zstyle ':fzf-tab:*' continuous-trigger 'tab'
zstyle ':fzf-tab:*' accept-line enter

zstyle ':autocomplete:*' fzf-completion yes
zstyle ':autocomplete:*' widget-style menu-select
zstyle ':autocomplete:*' insert-unambiguous yes


alias ll='ls -hAlFv --group-directories-first'
alias l='exa --long --icons --all --header --extended --git --group-directories-first --classify'
# alias p="ping -c 50 8.8.8.8"
alias g="git status"
# alias tldr="tldr --theme ocean"
alias bat="bat --number"
# alias cd='z'
# bindkey '^I' fzf-tab-complete

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
autoload -U compinit && compinit
