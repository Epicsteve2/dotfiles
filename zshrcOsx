#!/usr/bin/env zsh
# Initialization code that may require console input (password prompts, [y/n]
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
eval $(starship init zsh)
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/Users/sguo/.oh-my-zsh"

export HISTFILE="${HOME}/.zsh_history"
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE
# export SAVEHIST=50000

# setopt BANG_HIST                 # Treat the '!' character specially during expansion.
# setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
# setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
# setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
# setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  # git
  # brew
  # fast-syntax-highlighting
  #zsh-helmfile
  # python
  # pyenv
  # pipenv
  aws
  zsh-autosuggestions
  zsh-syntax-highlighting
  #zsh-autocomplete # this is the crap at the bottom
  globalias ### wtf this inturupts syntax highlighting???
  zsh-completions
  
  #gradle-completion
  kubectl
  #nvm
  pip
  # zsh-better-npm-completion
  docker
  fzf-tab
  forgit
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

alias ls='ls -G' # colors
alias ll='ls -AlFo'
alias l='exa --long --icons --all --header --git --group-directories-first --classify'
alias man='batman'
alias bat='bat --number'
alias cat='bat -pp'
alias drs="docker run --rm -it --entrypoint sh"
alias nnn="nnn -e"

export LS_COLORS='no=00;38;5;250:rs=0:di=01;38;5;198:ln=01;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:ex=01;38;5;82:*.cmd=00;38;5;82:*.exe=00;38;5;82:*.com=00;38;5;82:*.btm=00;38;5;82:*.bat=00;38;5;82:*.jpg=00;38;5;37:*.jpeg=00;38;5;37:*.png=00;38;5;37:*.gif=00;38;5;37:*.bmp=00;38;5;37:*.xbm=00;38;5;37:*.xpm=00;38;5;37:*.tif=00;38;5;37:*.tiff=00;38;5;37:*.pdf=00;38;5;98:*.odf=00;38;5;98:*.doc=00;38;5;98:*.ppt=00;38;5;98:*.pptx=00;38;5;98:*.db=00;38;5;98:*.aac=00;38;5;208:*.au=00;38;5;208:*.flac=00;38;5;208:*.mid=00;38;5;208:*.midi=00;38;5;208:*.mka=00;38;5;208:*.mp3=00;38;5;208:*.mpc=00;38;5;208:*.ogg=00;38;5;208:*.ra=00;38;5;208:*.wav=00;38;5;208:*.m4a=00;38;5;208:*.axa=00;38;5;208:*.oga=00;38;5;208:*.spx=00;38;5;208:*.xspf=00;38;5;208:*.mov=01;38;5;208:*.mpg=01;38;5;208:*.mpeg=01;38;5;208:*.3gp=01;38;5;208:*.m2v=01;38;5;208:*.mkv=01;38;5;208:*.ogm=01;38;5;208:*.mp4=01;38;5;208:*.m4v=01;38;5;208:*.mp4v=01;38;5;208:*.vob=01;38;5;208:*.qt=01;38;5;208:*.nuv=01;38;5;208:*.wmv=01;38;5;208:*.asf=01;38;5;208:*.rm=01;38;5;208:*.rmvb=01;38;5;208:*.flc=01;38;5;208:*.avi=01;38;5;208:*.fli=01;38;5;208:*.flv=01;38;5;208:*.gl=01;38;5;208:*.m2ts=01;38;5;208:*.divx=01;38;5;208:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*~=00;38;5;240:*#=00;38;5;240:*.part=00;38;5;240:*.incomplete=00;38;5;240:*.swp=00;38;5;240:*.tmp=00;38;5;240:*.temp=00;38;5;240:*.o=00;38;5;240:*.pyc=00;38;5;240:*.class=00;38;5;240:*.cache=00;38;5;240:';

setopt NO_LIST_AMBIGUOUS

# export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/
# overwritten by sdkman
export PATH="$PATH:$HOME/git/edge-dev-tools/ci"
PATH="/usr/local/opt/make/libexec/gnubin:$PATH"
# export PATH=/usr/local/bin:$PATH
# export GRADLE_HOME=/usr/local/Cellar/gradle/7.0.2
# eval "$(pyenv init -)"

export EDITOR=micro
export VISUAL=${EDITOR}

export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/sguo/.sdkman"
[[ -s "/Users/sguo/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/sguo/.sdkman/bin/sdkman-init.sh"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


# zstyle ':autocomplete:*' fzf-completion yes
# zstyle ':autocomplete:*' widget-style menu-select
# zstyle ':autocomplete:*' insert-unambiguous no
# zstyle ':autocomplete:*' default-context history-incremental-search-backward

alias fzfp="fzf --preview 'bat --color=always -pp --line-range=:500 {}'"
alias r="source ranger"
alias lol="lolcat"

eval "$(pyenv init - --path --no-rehash)"


fzf-up-arrow-widget() {
  #Source https://github.com/junegunn/fzf/issues/477#issuecomment-631707533
  local extra_ctrl_r="--height=40% 
         --preview 'bat --color=always -pp -l zsh --line-range=:500 <<<{}' --preview-window down:3:wrap"

  # local select_keys=(tab right) 

  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(fc -rl 1 | perl -ne 'print if !$seen{(/^\s*[0-9]+\**\s+(.*)/, $1)}++' |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --header='tab to edit, enter to execute' --bind=ctrl-r:toggle-sort,ctrl-z:ignore --expect=tab,right $extra_ctrl_r --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    local select=0
    if [[ $selected[1] == tab ]] || [[ $selected[1] == right ]]; then
      select=1
      shift selected
    fi
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
      [[ $select == 0 ]] && zle accept-line
    fi
  fi
  zle reset-prompt
  return $ret
}
zle -N fzf-up-arrow-widget fzf-up-arrow-widget
# binds up arrow to the widget. for MacOS only
bindkey "${terminfo[kcuu1]}" fzf-up-arrow-widget

export FZF_CTRL_R_OPTS="--height=90% --preview 'bat --color=always -pp -l zsh <<<{}' --preview-window down:3:wrap"

jql () {
  jq . "$1" --color-output | less --RAW-CONTROL-CHARS
}

# alias checker='docker run -v $(pwd)/Makefile:/Makefile checker'
alias lens='/Applications/Lens.app/Contents/MacOS/Lens'
# alias cd='z'
eval "$(zoxide init zsh)"

# setopt globdots
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd

zstyle ':fzf-tab:complete:z:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:bat:*' fzf-preview 'bat -pp --color=always $realpath'

zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'

zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':fzf-tab:*' fzf-bindings 'shift-tab:accept'
zstyle ':fzf-tab:*' continuous-trigger 'tab'
zstyle ':fzf-tab:*' accept-line enter
zstyle ':fzf-tab:*' fzf-flags '--header="tab to continue completing, enter to execute, shift+tab to accept and edit, esc to cancel"' '--height=60%'

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform

# found from fzf-scripts
superrg () {
    declare preview='bat --color=always --style=header,numbers -H {2} {1} | grep -C3 {q}'

    while getopts ':l' x; do
      case "$x" in
        l) list_files=1
          preview='bat --color=always --style=header,numbers {1} | grep -C3 {q}'
          ;;
      esac
    done
    shift $(( OPTIND - 1 ))
    unset x OPTARG OPTIND

    rg --color=always -n ${list_files:+-l} "$1" 2> /dev/null |
    fzf -d: \
    --ansi \
    --query="$1" \
    --phony \
    --bind="change:reload:rg -n ${list_files:+-l} --color=always {q}" \
    --bind="enter:execute:${EDITOR} {1}" \
    --preview="[[ -n {1} ]] && $preview" \
    --preview-window=up
}

lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
}
# is_in_git_repo() {
#   git rev-parse HEAD > /dev/null 2>&1
# }
# gf() { # git status but better
#   is_in_git_repo || return
#   git -c color.status=always status --short |
#   fzf-tmux -m --ansi --nth 2..,.. \
#     --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
#   cut -c4- | sed 's/.* -> //'
# }
# gt() { # tags, kinda useless
#   is_in_git_repo || return
#   git tag --sort -version:refname |
#   fzf-tmux --multi --preview-window right:70% \
#     --preview 'git show --color=always {} | head -'$LINES
# }
# gr() { # remote. kinda useless
#   is_in_git_repo || return
#   git remote -v | awk '{print $1 "\t" $2}' | uniq |
#   fzf-tmux --tac \
#     --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
#   cut -d$'\t' -f1
# }

# Taken from https://gist.github.com/junegunn/f4fca918e937e6bf5bad {{{
alias glNoGraph='git log --color=always --format="%C(auto)%h %an %C(blue)%s %C(yellow)%cr"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | delta'"
_viewGitLogLineUnfancy="$_gitLogLineToHash | xargs -I % sh -c 'git show %'"

# gls - git commit browser with previews and editor integration 
gl() {
    glNoGraph |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, alt-y to copy hash, alt-v to open in ${EDITOR}" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "alt-v:execute:$_viewGitLogLineUnfancy | ${EDITOR} -" \
                --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# fman() {
#     man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
# }

# No arguments: `git status`
# With arguments: acts like `git`

GIT_LOCALTION=$(which git)
alias g=git
git () {
  if [[ $# -gt 0 ]]; then
    $GIT_LOCALTION "$@"
  else
    forgit
    echo
    echo
    $GIT_LOCALTION status
  fi
}

export FORGIT_LOG_GRAPH_ENABLE=false
export PATH="$PATH:$FORGIT_INSTALL_DIR/bin"

forgit() {
    cat <<EOF | column -ts '|'
($(tput setaf 1)gl$(tput sgr0))|Interactive git log but better
($(tput setaf 1)ga$(tput sgr0))|Interactive git add selector
($(tput setaf 1)glo$(tput sgr0))|Interactive git log viewer
($(tput setaf 1)gi$(tput sgr0))|Interactive .gitignore generator
($(tput setaf 1)gd$(tput sgr0))|Interactive git diff viewer
($(tput setaf 1)grh$(tput sgr0))|Interactive git reset HEAD <file> selector
($(tput setaf 1)gcf$(tput sgr0))|Interactive git checkout <file> selector
($(tput setaf 1)gcb$(tput sgr0))|Interactive git checkout <branch> selector
($(tput setaf 1)gco$(tput sgr0))|Interactive git checkout <commit> selector
($(tput setaf 1)gss$(tput sgr0))|Interactive git stash viewer
($(tput setaf 1)gclean$(tput sgr0))|Interactive git clean selector
($(tput setaf 1)gcp$(tput sgr0))|Interactive git cherry-pick selector
($(tput setaf 1)grb$(tput sgr0))|Interactive git rebase -i selector
($(tput setaf 1)gfu$(tput sgr0))|Interactive git commit --fixup && git rebase -i --autosquash selector
EOF
}

subl () {
    cat <<EOF | column -t
super+t new_file
alt+super+up select_lines
alt+super+down select_lines
alt+up swap_line_up
alt+down swap_line_down
EOF
    '/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl' $@
}

# Delete (one or multiple) selected application(s)
# mnemonic [B]rew [C]lean [P]lugin (e.g. uninstall)
bcp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do; brew uninstall $prog; done;
  fi
}
# Install (one or multiple) selected application(s)
# using "brew search" as source input
# mnemonic [B]rew [I]nstall [P]lugin
bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do; brew install $prog; done;
  fi
}
# Update (one or multiple) selected application(s)
# mnemonic [B]rew [U]pdate [P]lugin
bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do; brew upgrade $prog; done;
  fi
}

brew-search() {
    # brew search '' | fzf --preview="brew info {}"
    brew formulae | fzf --preview="HOMEBREW_COLOR=true brew info {}"
}

FORGIT_HELP=$(<<<'
Command|Option
Enter|Confirm
Tab|Toggle mark and move up
Shift - Tab|Toggle mark and move down
?|Toggle preview window
Alt - W|Toggle preview wrap
Ctrl - S|Toggle sort
Ctrl - R|Toggle selection
Ctrl - Y|Copy commit hash
Ctrl - K / P|Selection move up
Ctrl - J / N|Selection move down
Alt - K / P|Preview move up
Alt - J / N|Preview move down' column -ts "|")
# instead of printf, can do $'\t'
export FORGIT_FZF_DEFAULT_OPTS=" --reverse --header '${FORGIT_HELP}' --height '100%' --ansi "
# %C = color
# %h = short commit hash
# %an = author
# %d ref name (HEAD, origin)
# %s subject / commit message
# cr commit date, relative
# black is supposed to work... idk waht's up with terminator
#https://git-scm.com/docs/git-log#Documentation/git-log.txt-emnem
export FORGIT_LOG_FORMAT='%C(auto)%h %C(green)%an%C(auto)%d %C(reset)%s %C(magenta)%C(bold)%cr%Creset'
export FORGIT_LOG_GRAPH_ENABLE=false

BREW_LOCATION=$(which brew)
brew () {
  if [[ $# -gt 0 ]]; then
    ${BREW_LOCATION} "$@"
  else
    cat <<EOF | column -ts '|'
($(tput setaf 1)bip$(tput sgr0))|Install (one or multiple) selected application(s)
($(tput setaf 1)bup$(tput sgr0))|Update (one or multiple) selected application(s)
($(tput setaf 1)bcp$(tput sgr0))|Delete (one or multiple) selected application(s)
($(tput setaf 1)brew-search$(tput sgr0))|Brew search
EOF
    echo
    echo
    ${BREW_LOCATION}
  fi
}

function  search-man(){
    MAN="/usr/bin/man"
    if [ -n "$1" ]; then
        $MAN "$@"
        return $?
    else
        $MAN -k . | fzf --reverse --preview="echo {1,2} | sed 's/ (/./' | sed -E 's/\)\s*$//' | xargs $MAN" | awk '{print $1 "." $2}' | tr -d '()' | xargs -r $MAN
        return $?
    fi
}
