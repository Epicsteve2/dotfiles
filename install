#!/usr/bin/env bash
clear -x

set -e
# set -x

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
RESETCOLOR=$(tput setaf 7) #white
RESETCOLOR=$(tput sgr0)

addFile() {
    if [ -z "$1" ]; then
        >&2 echo "${RED}No argument supplied${RESETCOLOR}"
        return 1
    fi

    read -p "${CYAN}add ${YELLOW}${1}${CYAN}? [y/N]: ${RESETCOLOR}" -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    fi
    return 1
}

chooseFromList() {
    for (( i=1; i<=${#}-1; i++ )) do
        echo "${CYAN}[   ${i}   ]${RESETCOLOR} $(eval echo \$${i})"
    done
    echo "${CYAN}[ Enter ]${RESETCOLOR} $(eval echo \$${#})"
    read -p "${YELLOW}Enter a choice: ${RESETCOLOR}" -n 1 -r
    echo
}

copyFiles() {
    if addFile zshrc; then ${COMMAND} zshrc     ~/.zshrc; fi
    if addFile bashrc; then ${COMMAND} bashrc     ~/.bashrc; fi
    if addFile gitconfig; then ${COMMAND} gitconfig ~/.gitconfig; fi
    if addFile mpv; then ${COMMAND} mpv ~/.config/mpv; fi
    if addFile hyper.js; then ${COMMAND} hyper.js ~/.hyper.js; fi
    if addFile micro; then
        mkdir --parents --verbose ~/.config/micro
        ${COMMAND} microSettings.json ~/.config/micro/settings.json
    fi

    if addFile sublime-text; then
        mkdir --parents --verbose ~/.config/sublime-text-3/Packages/User
        ${COMMAND} Preferences.sublime-settings ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings
    fi

	if addFile htoprc; then
        mkdir --parents --verbose ~/.config/htop
        ${COMMAND} htoprc ~/.config/htop/htoprc
    fi

	if addFile cudatext; then
		mkdir --parents --verbose ~/.config/cudatext/settings/
		${COMMAD} cudatext.json ~/.config/user.json
	fi

    echo
    chooseFromList "Powerlevel10k fancy" "Powerlevel10k clean" "Next"
    if [[ -n $REPLY ]]; then
        case ${REPLY} in
            1) ${COMMAND} p10kFancy.zsh  ~/.p10k.zsh;;
            2) ${COMMAND} p10kClean.zsh  ~/.p10k.zsh;;
            *) echo >&2 "${RED}Error: Not a valid input${RESETCOLOR}"
        esac
        echo
    fi

    chooseFromList "nano 4" "nano 5" "Next"
    if [[ -n $REPLY ]]; then
        case ${REPLY} in
            1) ${COMMAND} nanorc4    ~/.nanorc;;
            2) ${COMMAND} nanorc5    ~/.nanorc;;
            *) echo >&2 "${RED}Error: Not a valid input${RESETCOLOR}"
               return;;
        esac
        echo
        echo "${CYAN}Cloning nano-syntax-highlighting...${RESETCOLOR}"
        if command -v curl &>/dev/null; then curl https://raw.githubusercontent.com/scopatz/nanorc/master/install.sh | sh
        elif command -v wget &>/dev/null; then wget https://raw.githubusercontent.com/scopatz/nanorc/master/install.sh -O- | sh
        else
            echo >&2 "${RED}Error: Somehow you don't have ${CYAN}curl wget${RESETCOLOR}"
            return
        fi
    fi
}

while true; do
    chooseFromList "Copy to home" "Symlink" "Delete" "Copy from home" "Install oh-my-zsh" "Install oh-my-zsh plugins" "Install fzf" "Install fonts" "Exit"
    echo
    if [[ -z $REPLY ]]; then exit; fi
    case $REPLY in
        1)  COMMAND="cp --verbose --recursive"
            copyFiles;;

        2)  COMMAND="ln --symbolic --verbose --force --relative"
            copyFiles;;

        3)  rm --force --verbose ~/.zshrc
            rm --force --verbose ~/.bashrc
            rm --force --verbose ~/.nanorc
            rm --force --verbose ~/.gitconfig
            rm --force --verbose ~/.p10k.zsh
            rm --force --verbose ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings
            rm --force --verbose ~/.config/micro
            rm --force --verbose ~/.config/Hyper/.hyper.js
            echo "${YELLOW}removing mpv...${RESETCOLOR}"
            rm --recursive --force  ~/.config/mpv
            echo "${YELLOW}removing oh-my-zsh...${RESETCOLOR}"
            rm --recursive --force ~/.oh-my-zsh
            echo "${YELLOW}removing fzf...${RESETCOLOR}"
            rm --recursive --force ~/.fzf;;

        4)  cp --verbose --recursive ~/.zshrc     zshrc
            cp --verbose --recursive ~/.nanorc    nanorc
            cp --verbose --recursive ~/.gitconfig gitconfig
            cp --verbose --recursive ~/.p10k.zsh  p10k.zsh;;

        5)  if command -v curl &>/dev/null; then sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
            elif command -v wget &>/dev/null; then sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
            elif command -v fetch &>/dev/null; then sh -c "$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"; fi
            echo >&2 "${RED}Error: Somehow you don't have ${CYAN}curl wget fetch${RESETCOLOR}";;

        6)  echo "${CYAN}Cloning powerlevel10k...${RESETCOLOR}"
            git clone --depth=1 -- https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
            echo "${CYAN}zsh-autocomplete${RESETCOLOR}"
            git clone --depth=1 -- https://github.com/marlonrichert/zsh-autocomplete.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autocomplete
            echo
            echo "${CYAN}Cloning zsh-autosuggestions...${RESETCOLOR}"
            git clone           -- https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
            echo
            echo "${CYAN}Cloning zsh-syntax-highlighting...${RESETCOLOR}"
            git clone           -- https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
            echo
            echo "${CYAN}Cloning zsh-completions...${RESETCOLOR}"
            git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions;;

        7)  git clone --depth=1 https://github.com/junegunn/fzf.git ~/.fzf
            ~/.fzf/install;;

        8)  mkdir --parents --verbose ~/.local/share/fonts/
            cp --archive fonts/. ~/.local/share/fonts/
            fc-cache --force --verbose;;

        *) echo "${RED}Error: Not a valid input${RESETCOLOR}";;
    esac
    echo
done
