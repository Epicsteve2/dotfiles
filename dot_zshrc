# Download Znap, if it's not there yet.
if [[ ! -f ~/code-monkey/zsh-plugins/zsh-snap/znap.zsh ]]; then
    mkdir --parents ~/code-monkey/zsh-plugins/
    git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git ~/code-monkey/zsh-plugins/zsh-snap/
fi
source ~/code-monkey/zsh-plugins/zsh-snap/znap.zsh

znap eval starship 'starship init zsh --print-full-init'
znap prompt

znap eval zoxide "zoxide init zsh"

znap source zsh-users/zsh-autosuggestions
znap source zsh-users/zsh-syntax-highlighting
znap source Aloxaf/fzf-tab
znap source Freed-Wu/fzf-tab-source
znap source marzocchi/zsh-notify
zstyle ':notify:*' expire-time 15000
function zvm_config() {
  ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT
}
znap source jeffreytse/zsh-vi-mode
function zvm_after_init() {
  znap eval atuin "atuin init zsh"

  bindkey " " globalias

  # home and end
  bindkey  "^[[H"   beginning-of-line
  bindkey  "^[[F"   end-of-line
  # delete key
  bindkey "^[[3~" delete-char

  # idk lol
  bindkey "^[[1;5C" forward-word
  bindkey "^[[1;5D" backward-word
  bindkey "\C-h" backward-kill-word
  bindkey "\e[3;5~" kill-word
}

function zvm_after_lazy_keybindings() {
  bindkey -M vicmd '_' vi-first-non-blank
  bindkey -M visual '_' vi-first-non-blank
}

zstyle ':fzf-tab:complete:(-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'
zstyle ':fzf-tab:*' fzf-bindings 'tab:accept'
zstyle ':fzf-tab:*' continuous-trigger shift-tab
zstyle ':fzf-tab:*' accept-line enter
# zstyle ':fzf-tab:*' fzf-flags --header="tab to accept and edit, enter to execute, shift+tab to continue completing, esc to cancel"

# TODO: can get lesspipe and other stuff to make completions better https://github.com/Freed-Wu/fzf-tab-source
# # don't need because of Freed-Wu/fzf-tab-source
# preview directory's content with exa when completing cd
# zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
# zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${(Q)realpath}'

# disable preview for options and arguments... I think
zstyle ':fzf-tab:complete:*:options' fzf-preview 
zstyle ':fzf-tab:complete:*:argument-1' fzf-preview
zstyle ':completion:*:git-checkout:*' sort false
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# Case insensitive https://superuser.com/questions/1092033/how-can-i-make-zsh-tab-completion-fix-capitalization-errors-for-directories-and
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

export HISTFILE="${HOME}/.zsh_history"
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE

# setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
# setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

# when deleting word, stop at slash
WORDCHARS='*?_-[]~\!#$%^(){}<>|`@#$%^*()+:?'

# home and end
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line
# delete key
bindkey "^[[3~" delete-char

# idk lol
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "\C-h" backward-kill-word
bindkey "\e[3;5~" kill-word

export EDITOR=nvim
export VISUAL=${EDITOR}

mkcd () {
  mkdir $1 && cd "$_"
}

alias g="git"
GIT_LOCATION="$(which git)"
git () {
  if [[ $# -gt 0 ]]; then
    ${GIT_LOCATION} "$@"
  else
    ${GIT_LOCATION} status
  fi
}
alias vim="nvim"
alias vi="nvim"
alias v="nvim"
alias n='nvim'
alias sudo='sudo -v; sudo '
alias s='sudo'
alias d='docker'
alias dc='docker compose'
alias bm='bat --language help --plain'
alias t="gtrash put"
alias copy="tee /dev/tty | tr -d '\n' | xclip -sel clip"
alias :q="exit"
alias ...="../.."
alias ....="../../.."
alias .....="../../../.."
alias ......="../../../../.."
alias .......="../../../../../.."
alias which='echo "Using type!"; type'
alias neofetch='echo "using fastfetch"; fastfetch'
alias tf='terraform'
alias ls='eza --classify --group-directories-first'
alias l='eza --long --icons --all --header --git --group-directories-first --classify'
alias lg='lazygit'
alias ldk='lazydocker'
alias cat="bat --plain --plain"
alias bat="bat --number"
globalias() {
  EXPAND_ALIASES=(g n v vi vim d dc s tf t lg ldk)
   if [[ ${EXPAND_ALIASES[(ie)$LBUFFER]} -le ${#EXPAND_ALIASES} ]]; then
     zle _expand_alias
     zle expand-word
   fi
   zle self-insert
}
zle -N globalias
bindkey " " globalias

export MANPAGER="sh -c 'col --no-backspaces --spaces | bat --language man --plain'"

# cd when just typing directory
setopt autocd
 
# opensuse
[[ -f /etc/zsh_command_not_found ]] && source /etc/zsh_command_not_found
export BAT_PAGER='less --quit-if-one-screen --chop-long-lines --RAW-CONTROL-CHARS --LONG-PROMPT --ignore-case'
export PAGER='less --quit-if-one-screen --chop-long-lines --RAW-CONTROL-CHARS --LONG-PROMPT --ignore-case'
[[ -d ${HOME}/bin ]] && export PATH="${PATH}:${HOME}/bin"
[[ -d ${HOME}/.local/bin ]] && export PATH="${PATH}:${HOME}/.local/bin"
export MANROFFOPT='-c' # fix man page when piping to `bat`

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

source <(docker completion zsh)
source <(gtrash completion zsh)
