## Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh" # pull behavior same as clone, source init.zsh
zinit light starship/starship
# zinit light romkatv/zsh-defer
# zinit ice depth=1; zinit light romkatv/powerlevel10k
BASE16_THEME=monokai; zinit ice atload"base16_${BASE16_THEME}"; zinit light "chriskempson/base16-shell"
zinit light 'chrissicool/zsh-256color' # idk what this does lol
zinit light ohmyzsh/ohmyzsh
zinit ice depth=1 wait"1" lucid; zinit snippet OMZP::/zoxide
# zinit ice wait"0c" lucid atinit"zpcompinit;zpcdreplay"; zinit light zdharma-continuum/fast-syntax-highlighting
# zinit load marlonrichert/zsh-autocomplete
zinit ice wait"0a" lucid; zinit light Aloxaf/fzf-tab
# zinit ice wait"1" lucid atload"zicompinit; zicdreplay" blockf; zinit light zsh-users/zsh-completions
# zinit ice wait"1" lucid as"completion"; zinit snippet OMZP::docker-compose/_docker-compose
# zinit ice wait"1" lucid as"completion"; zinit snippet OMZP::docker/_docker
# zinit ice wait'1' lucid as"completion"; zinit snippet OMZP::terraform/_terraform
# zinit ice wait"1" lucid atload"zicompinit; zicdreplay" blockf; zinit snippet OMZP::aws
# zinit ice wait"1" lucid atload"zicompinit; zicdreplay" blockf; zinit snippet OMZP::kubectl
# zinit ice wait"1" lucid as"completion"; zinit snippet OMZP::pip/_pip
zinit ice wait"1" lucid; zinit snippet OMZP::fzf
zinit ice wait"1" lucid; zinit snippet OMZP::globalias
GLOBALIAS_FILTER_VALUES=(l ls)
# zinit ice wait"1" lucid; zinit snippet OMZ::plugins/thefuck
# zinit light chitoku-k/fzf-zsh-completions
zinit ice wait"1" lucid; zinit light wfxr/forgit
FORGIT_HELP=$(<<<'
Command 	Option
Enter 	Confirm
Tab 	Toggle mark and move up
Shift - Tab 	Toggle mark and move down
? 	Toggle preview window
Alt - W 	Toggle preview wrap
Ctrl - S 	Toggle sort
Ctrl - R 	Toggle selection
Ctrl - Y 	Copy commit hash*
Ctrl - K / P 	Selection move up
Ctrl - J / N 	Selection move down
Alt - K / P 	Preview move up
Alt - J / N 	Preview move down' | column -ts "$(printf '\t')")
# instead of printf, can do $'\t'
FORGIT_FZF_DEFAULT_OPTS="
--reverse
--header '${FORGIT_HELP}'
--height '100%'
"
# %C = color
# %h = short commit hash
# %an = author
# %d ref name (HEAD, origin)
# %s subject / commit message
# cr commit date, relative
#https://git-scm.com/docs/git-log#Documentation/git-log.txt-emnem
FORGIT_LOG_FORMAT='%C(auto)%h %C(green)%an%C(auto)%d %C(reset)%s %C(magenta)%C(bold)%cr%Creset'
FORGIT_LOG_GRAPH_ENABLE=false
FORGIT_GRAPH_ENABLE=false
# --exact
# --border
# --cycle

#TODO: fix this!
zinit light zsh-users/zsh-syntax-highlighting # small issue when fail run command with leftover characters from autosuggest
zinit ice wait"0a" lucid atload'_zsh_autosuggest_start'; zinit light zsh-users/zsh-autosuggestions

DOWNLOAD_CLI_PROGRAMS=2
if [[ -n $DOWNLOAD_CLI_PROGRAMS ]]; then
  # EXA
  zinit ice wait"2" lucid from"gh-r" as"program" mv"bin/exa* -> exa"; zinit light ogham/exa
  zinit ice wait blockf atpull'zinit creinstall -q .'
  # DELTA
  zinit ice lucid wait"0" as"program" from"gh-r" pick"delta*/delta"; zinit light 'dandavison/delta'
  # DUST
  zinit ice wait"2" lucid from"gh-r" as"program" mv"dust*/dust -> dust" pick"dust" atload"alias du=dust"; zinit light bootandy/dust
  # DUF
  zinit ice lucid wait"0" as"program" from"gh-r" bpick='*linux_amd64.deb' pick"usr/bin/duf" atload"alias df=duf"; zinit light muesli/duf
  # BAT
  zinit ice from"gh-r" as"program" mv"bat* -> bat" pick"bat/bat" atload"alias bat=bat"; zinit light sharkdp/bat
  # BAT-EXTRAS
  # zinit ice wait"1" as"program" pick"src/batgrep.sh" lucid; zinit ice wait"1" as"program" pick"src/batdiff.sh" lucid
  # zinit light eth-p/bat-extras
  # alias batdiff=batdiff.sh
  # alias batgrep=batgrep.sh
  # RIPGREP
  zinit ice from"gh-r" as"program" mv"ripgrep* -> ripgrep" pick"ripgrep/rg"; zinit light BurntSushi/ripgrep
  # FD
  zinit ice as"command" from"gh-r" mv"fd* -> fd" pick"fd/fd"; zinit light sharkdp/fd
  # FZF
  zinit ice from"gh-r" as"command"; zinit light junegunn/fzf
  zinit ice lucid wait'0c' multisrc"shell/{completion,key-bindings}.zsh" id-as"junegunn/fzf_completions" pick"/dev/null"; zinit light junegunn/fzf
  # RANGER
  zinit ice depth'1' as"program" pick"ranger.py"; zinit light ranger/ranger
fi

[ -f ~/.config/broot/launcher/bash/br ] && source /home/patrick/.config/broot/launcher/bash/br

fzf-up-arrow-widget() {
  #Source https://github.com/junegunn/fzf/issues/477#issuecomment-631707533
  local extra_ctrl_r="--preview 'bat --color=always --plain --plain --language zsh <<<{}' --preview-window down:3:wrap"

  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(fc -rl 1 | perl -ne 'print if !$seen{(/^\s*[0-9]+\**\s+(.*)/, $1)}++' |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --header='tab to edit, enter to execute' --bind=ctrl-r:toggle-sort,ctrl-z:ignore --expect=tab $extra_ctrl_r --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    local select=0
    if [[ $selected[1] == tab ]]; then
      select=1
      shift selected
    fi
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
      [[ $select == 0 ]] && zle accept-line
    fi
  fi
  zle reset-prompt
  return $ret
}
zle -N fzf-up-arrow-widget fzf-up-arrow-widget
bindkey "${terminfo[kcuu1]}" fzf-up-arrow-widget
bindkey "${key[Up]}" fzf-up-arrow-widget

bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "\C-h" backward-kill-word
bindkey "\e[3;5~" kill-word

aptu() {
  sudo apt update

  tput setaf 1 && echo "Listing..." && tput sgr0
  apt list --upgradable # | fzf do smth here

  tput setaf 1 && echo "Upgrading..." && tput sgr0
  sudo apt upgrade
}

apt-search() {
  apt-cache search '' \
    | sort \
    | cut --delimiter ' ' --fields 1 \
    | fzf --multi --cycle --reverse --preview 'apt-cache show {1}' \
    | xargs -r sudo apt install
}

pacman-search() {
  pacman -Ss '' \
    | sort \
    | cut --delimiter ' ' --fields 1 \
    | fzf --multi --cycle --reverse --preview 'pacman -Ss {1}' \
    | xargs -r sudo pacman -S
}

export BAT_PAGER='less --quit-if-one-screen --chop-long-lines --RAW-CONTROL-CHARS --LONG-PROMPT --ignore-case'
export MANPAGER="sh -c 'col -bx | bat --language man --plain'"
export LS_COLORS='no=0:rs=0:di=01;38;5;198:ln=01;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:ex=01;38;5;82:*.cmd=00;38;5;82:*.exe=00;38;5;82:*.com=00;38;5;82:*.btm=00;38;5;82:*.bat=00;38;5;82:*.jpg=00;38;5;37:*.jpeg=00;38;5;37:*.png=00;38;5;37:*.gif=00;38;5;37:*.bmp=00;38;5;37:*.xbm=00;38;5;37:*.xpm=00;38;5;37:*.tif=00;38;5;37:*.tiff=00;38;5;37:*.pdf=00;38;5;98:*.odf=00;38;5;98:*.doc=00;38;5;98:*.ppt=00;38;5;98:*.pptx=00;38;5;98:*.db=00;38;5;98:*.aac=00;38;5;208:*.au=00;38;5;208:*.flac=00;38;5;208:*.mid=00;38;5;208:*.midi=00;38;5;208:*.mka=00;38;5;208:*.mp3=00;38;5;208:*.mpc=00;38;5;208:*.ogg=00;38;5;208:*.ra=00;38;5;208:*.wav=00;38;5;208:*.m4a=00;38;5;208:*.axa=00;38;5;208:*.oga=00;38;5;208:*.spx=00;38;5;208:*.xspf=00;38;5;208:*.mov=01;38;5;208:*.mpg=01;38;5;208:*.mpeg=01;38;5;208:*.3gp=01;38;5;208:*.m2v=01;38;5;208:*.mkv=01;38;5;208:*.ogm=01;38;5;208:*.mp4=01;38;5;208:*.m4v=01;38;5;208:*.mp4v=01;38;5;208:*.vob=01;38;5;208:*.qt=01;38;5;208:*.nuv=01;38;5;208:*.wmv=01;38;5;208:*.asf=01;38;5;208:*.rm=01;38;5;208:*.rmvb=01;38;5;208:*.flc=01;38;5;208:*.avi=01;38;5;208:*.fli=01;38;5;208:*.flv=01;38;5;208:*.gl=01;38;5;208:*.m2ts=01;38;5;208:*.divx=01;38;5;208:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*~=00;38;5;240:*#=00;38;5;240:*.part=00;38;5;240:*.incomplete=00;38;5;240:*.swp=00;38;5;240:*.tmp=00;38;5;240:*.temp=00;38;5;240:*.o=00;38;5;240:*.pyc=00;38;5;240:*.class=00;38;5;240:*.cache=00;38;5;240:';
export EXA_COLORS="${LS_COLORS}"
export LSCOLORS=$LS_COLORS

export EDITOR=nano
export VISUAL=${EDITOR}
export PAGER='less --quit-if-one-screen --chop-long-lines --RAW-CONTROL-CHARS --LONG-PROMPT --ignore-case'
export SHELL='/usr/bin/zsh'

export HISTFILE="${HOME}/.history"
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE

# setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
# setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
# setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
# setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.


zstyle ':completion:*:git-checkout:*' sort false
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'

# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'
zstyle ':fzf-tab:*' fzf-bindings 'shift-tab:accept'
zstyle ':fzf-tab:*' continuous-trigger 'tab'
zstyle ':fzf-tab:*' accept-line enter
zstyle ':fzf-tab:*' fzf-flags '--header="tab to continue completing, enter to execute, shift+tab to accept and edit, esc to cancel"'


# zstyle ':autocomplete:*' fzf-completion yes
# zstyle ':autocomplete:*' widget-style menu-select
# zstyle ':autocomplete:*' insert-unambiguous yes

alias ll='ls -hAlFv --group-directories-first --color=always'
alias l='exa --long --icons --all --header --extended --git --group-directories-first --classify'
alias bat="bat --number"

alias g="git"
GIT_LOCATION="$(which git)"
git () {
  if [[ $# -gt 0 ]]; then
    $GIT_LOCATION "$@"
  else
    forgit
    echo
    echo
    $GIT_LOCATION status
  fi
}

forgit() {
    cat <<EOF
Interactive git log but better ($(tput setaf 1)gl$(tput sgr0))
Interactive git add selector ($(tput setaf 1)ga$(tput sgr0))
Interactive git log viewer ($(tput setaf 1)glo$(tput sgr0))
Interactive .gitignore generator ($(tput setaf 1)gi$(tput sgr0))
Interactive git diff viewer ($(tput setaf 1)gd)$(tput sgr0)
Interactive git reset HEAD <file> selector ($(tput setaf 1)grh$(tput sgr0))
Interactive git checkout <file> selector ($(tput setaf 1)gcf$(tput sgr0))
Interactive git checkout <branch> selector ($(tput setaf 1)gcb$(tput sgr0))
Interactive git checkout <commit> selector ($(tput setaf 1)gco$(tput sgr0))
Interactive git stash viewer ($(tput setaf 1)gss$(tput sgr0))
Interactive git clean selector ($(tput setaf 1)gclean$(tput sgr0))
Interactive git cherry-pick selector ($(tput setaf 1)gcp$(tput sgr0))
Interactive git rebase -i selector ($(tput setaf 1)grb$(tput sgr0))
Interactive git commit --fixup && git rebase -i --autosquash selector ($(tput setaf 1)gfu$(tput sgr0))
EOF
}

# Based on http://stackoverflow.com/a/41420448/4757 {{{
function expand-multiple-dots() {
    local MATCH
    if [[ $LBUFFER =~ '(^| )\.\.\.+' ]]; then
        LBUFFER=$LBUFFER:fs%\.\.\.%../..%
    fi
}

function expand-multiple-dots-then-expand-or-complete() {
    zle expand-multiple-dots
    zle expand-or-complete
}

function expand-multiple-dots-then-accept-line() {
    zle expand-multiple-dots
    zle accept-line
}

# zle -N expand-multiple-dots
# zle -N expand-multiple-dots-then-expand-or-complete
# zle -N expand-multiple-dots-then-accept-line
# bindkey '^I' expand-multiple-dots-then-expand-or-complete
# bindkey '^M' expand-multiple-dots-then-accept-line
# This breaks autosuggest when running incorrect command
#}}}

apt_fzf() {
  command fzf -e +s --multi --cycle --ansi \
    --bind='Ctrl-X:toggle-preview' \
    --no-hscroll --inline-info \
    --header='tab to select multiple packages, Ctrl-X for more info on a package' "$@"
}

apt_install() {
  local pkgs count
  mapfile -t pkgs
  (( ${#pkgs} > 0 )) || exit
  count="${#pkgs[@]} package"
  (( ${#pkgs[@]} > 1 )) && count+='s'
  printf "installing %s: %s\n" "$count" "${pkgs[*]}"
  $1 "${pkgs[@]}" < /dev/tty
}

apt_select_from() {
  local cmd='command -v'
  for a; do
    case "$a" in
      -c)
        cmd="$2"
        shift 2
        ;;
    esac
  done
  for c; do
    if $cmd "${c%% *}" &> /dev/null; then
      echo "$c"
      return 0
    fi
  done
  return 1
}

# wtf
# also colors broke, deal with it later
apt_search() {
  apt_fzf --preview="apt-cache show {1} | sed --unbuffered --regexp-extended \"s|^([a-zA-Z0-9-]*?:)|$(tput setaf 1)\1$(tput sgr0)|\"" \
      --query="$1" \
    < <(apt-cache search '.*' | sort |
      sed -u -r "s|^([^ ]+)|${c_green}\1${c_reset}|") |
    cut -d' ' -f1 |
    sudo apt install
}

superrg () {
    declare preview='bat --color=always --style=header,numbers -H {2} {1} | grep -C3 {q}'

    while getopts ':l' x; do
      case "$x" in
        l) list_files=1
          preview='bat --color=always --style=header,numbers {1} | grep -C3 {q}'
          ;;
      esac
    done
    shift $(( OPTIND - 1 ))
    unset x OPTARG OPTIND

    rg --color=always -n ${list_files:+-l} "$1" 2> /dev/null |
    fzf -d: \
    --ansi \
    --query="$1" \
    --phony \
    --bind="change:reload:rg -n ${list_files:+-l} --color=always {q}" \
    --bind="enter:execute:${EDITOR} {1}" \
    --preview="[[ -n {1} ]] && $preview"
}

# Git specific filters from https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
# stole from https://github.com/parkercoates/dotfiles/blob/master/.zsh/fzf.zsh {{{
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}
gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-tmux -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}
# gb() {
#   is_in_git_repo || return
#   git branch -a --color=always | grep -v '/HEAD\s' | sort |
#   fzf-tmux --ansi --multi --tac --preview-window right:70% \
#     --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
#   sed 's/^..//' | cut -d' ' -f1 |
#   sed 's#^remotes/##'
# }
gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-tmux --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}
# gh() {
#   is_in_git_repo || return
#   git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph |
#   fzf-tmux --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
#     --header 'Press CTRL-S to toggle sort' \
#     --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
#   grep -o '[a-f0-9]\{7,\}'
# }
# gr() {
#   is_in_git_repo || return
#   git remote -v | awk '{print $1 "\t" $2}' | uniq |
#   fzf-tmux --tac \
#     --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
#   cut -d$'\t' -f1
# }
#}}}
# fshow() {
#   git log --graph --color=always \
#       --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
#   fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
#       --bind "ctrl-m:execute:
#                 (grep -o '[a-f0-9]\{7\}' | head -1 |
#                 xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
#                 {}
# FZF-EOF"
# }

# git-fshow() {
# 	local g=(
# 		git log
# 		--graph
# 		--format='%C(auto)%h%d %s %C(white)%C(bold)%cr'
# 		--color=always
# 		"$@"
# 	)

# 	local fzf=(
# 		fzf
# 		--ansi
# 		--reverse
# 		--tiebreak=index
# 		--no-sort
# 		--bind=ctrl-s:toggle-sort
# 		--preview 'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1; }; f {}'
# 	)
# 	$g | $fzf
# }

# git-commit-show () 
# {
#   git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"  | \
#    fzf --ansi --no-sort --reverse --tiebreak=index --preview \
#    'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1 ; }; f {}' \
#    --bind "j:down,k:up,alt-j:preview-down,alt-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up,q:abort,ctrl-m:execute:
#                 (grep -o '[a-f0-9]\{7\}' | head -1 |
#                 xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
#                 {}
# FZF-EOF" --preview-window=right:60%
# }

# alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'

# Taken from https://gist.github.com/junegunn/f4fca918e937e6bf5bad {{{
# alias glNoGraph='git log --color=always --format="%C(auto)%h %an %C(blue)%s %C(yellow)%cr"'
# _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
# _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | delta'"
# _viewGitLogLineUnfancy="$_gitLogLineToHash | xargs -I % sh -c 'git show %'"

# # gls - git commit browser with previews and vim integration 
# gls() {
#     glNoGraph |
#         fzf --no-sort --reverse --tiebreak=index --no-multi \
#             --ansi --preview="$_viewGitLogLine" \
#                 --header "enter to view, alt-y to copy hash, alt-v to open in ${EDITOR}" \
#                 --bind "enter:execute:$_viewGitLogLine   | less -R" \
#                 --bind "alt-v:execute:$_viewGitLogLineUnfancy | ${EDITOR} -" \
#                 --bind "alt-y:execute:$_gitLogLineToHash | xclip"
# }

fman() {
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}
# Get the colors in the opened man page itself
# export MANPAGER="sh -c 'col -bx | bat -l man -p --paging always'"
# fco() {
#   local tags branches target
#   branches=$(
#     git --no-pager branch --all \
#       --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
#     | sed '/^$/d') || return
#   tags=$(
#     git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
#   target=$(
#     (echo "$branches"; echo "$tags") |
#     fzf --no-hscroll --no-multi -n 2 \
#         --ansi) || return
#   git checkout $(awk '{print $2}' <<<"$target" )
# }

# fcs() {
#   local commits commit
#   commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
#   commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
#   echo -n $(echo "$commit" | sed "s/ .*//")
# }

# Taken from https://gist.github.com/junegunn/f4fca918e937e6bf5bad {{{
alias glNoGraph='git log --color=always --format="%C(auto)%h %an %C(blue)%s %C(yellow)%cr"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | delta'"
_viewGitLogLineUnfancy="$_gitLogLineToHash | xargs -I % sh -c 'git show %'"

# gls - git commit browser with previews and editor integration 
gl() {
    glNoGraph |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, alt-y to copy hash, alt-v to open in ${EDITOR}" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "alt-v:execute:$_viewGitLogLineUnfancy | ${EDITOR} -" \
                --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# git log show with fzf
# gli() {

#   # param validation
#   if [[ ! `git log -n 1 $@ | head -n 1` ]] ;then
#     return
#   fi

#   # filter by file string
#   local filter
#   # param existed, git log for file if existed
#   if [ -n $@ ] && [ -f $@ ]; then
#     filter="-- $@"
#   fi

#   # git command
#   local gitlog=(
#     git log
#     --graph --color=always
#     --abbrev=7
#     --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr'
#     $@
#   )

#   # fzf command
#   local fzf=(
#     fzf
#     --ansi --no-sort --reverse --tiebreak=index
#     --preview "f() { set -- \$(echo -- \$@ | grep -o '[a-f0-9]\{7\}'); [ \$# -eq 0 ] || git show --color=always \$1 $filter | delta; }; f {}"
#     --bind "ctrl-q:abort,ctrl-m:execute:
#                 (grep -o '[a-f0-9]\{7\}' | head -1 |
#                 xargs -I % sh -c 'git show --color=always % $filter | less -R') << 'FZF-EOF'
#                 {}
#                 FZF-EOF"
#    --preview-window=right:60%
#   )

#   # piping them
#   $gitlog | $fzf
# }
#}}}

# alias p="ping -c 50 8.8.8.8"
# alias tldr="tldr --theme ocean"
# alias cd='z'

# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit
