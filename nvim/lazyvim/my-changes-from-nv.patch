diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/config/autocmds.lua /home/stephen/.config/nvim/lua/config/autocmds.lua
--- /home/stephen/code-monkey/Nv/lua/config/autocmds.lua	2023-02-16 20:22:47.390610931 -0500
+++ /home/stephen/.config/nvim/lua/config/autocmds.lua	2023-04-27 21:52:35.178686413 -0400
@@ -31,6 +31,30 @@
     "dap-terminal",
   },
   callback = function(event)
     vim.keymap.set("n", "q", "<cmd>bdelete!<cr>", { buffer = event.buf, silent = true })
   end,
 })
+
+vim.cmd("let g:vimtex_quickfix_mode=0")
+vim.cmd("let g:vimtex_quickfix_open_on_warning=0")
+vim.cmd("let g:vimtex_mappings_prefix='<leader>\\'")
+-- vim.cmd("set conceallevel=2")
+
+vim.cmd("set backup")
+vim.cmd("set backupdir=~/.config/nvim/backups/")
+vim.cmd("set writebackup")
+vim.cmd("set backupcopy=yes")
+vim.cmd("au BufWritePre * let &bex = '@' . strftime(\"%F.%H:%M\")")
+-- https://github.com/rcarriga/nvim-notify/issues/159
+vim.api.nvim_set_hl(0, "NotifyBackground", { fg = "#ffffff", bg = "#333333" })
+
+-- TODO: maybe put this in keymaps.lua lol
+-- Apparently this doesn't work in macros, so this is the fix
+-- https://github.com/rhysd/clever-f.vim/issues/22#issuecomment-1043158334
+vim.cmd("let g:clever_f_not_overwrites_standard_mappings = 1")
+vim.cmd('map <expr> f reg_recording() .. reg_executing() == "" ? "<Plug>(clever-f-reset)<Plug>(clever-f-f)" : "f"')
+vim.cmd('map <expr> F reg_recording() .. reg_executing() == "" ? "<Plug>(clever-f-reset)<Plug>(clever-f-F)" : "F"')
+vim.cmd('map <expr> t reg_recording() .. reg_executing() == "" ? "<Plug>(clever-f-reset)<Plug>(clever-f-t)" : "t"')
+vim.cmd('map <expr> T reg_recording() .. reg_executing() == "" ? "<Plug>(clever-f-reset)<Plug>(clever-f-T)" : "T"')
+vim.cmd('map <expr> ; reg_recording() .. reg_executing() == "" ? "<Plug>(clever-f-repeat-forward)" : ";"')
+vim.cmd('map <expr> , reg_recording() .. reg_executing() == "" ? "<Plug>(clever-f-repeat-back)" : ","')
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/config/keymaps.lua /home/stephen/.config/nvim/lua/config/keymaps.lua
--- /home/stephen/code-monkey/Nv/lua/config/keymaps.lua	2023-04-27 21:12:14.158409828 -0400
+++ /home/stephen/.config/nvim/lua/config/keymaps.lua	2023-05-08 14:42:03.817172565 -0400
@@ -1,12 +1,111 @@
 -- Keymaps are automatically loaded on the VeryLazy event
 -- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
 if vim.fn.executable("gitui") == 1 then
   -- gitui instead of lazygit
-  vim.keymap.set("n", "<leader>gg", function() require("lazyvim.util").float_term({ "gitui" }) end, { desc = "gitui (cwd)" })
-  vim.keymap.set("n", "<leader>gG", function() require("lazyvim.util").float_term({ "gitui" }, { cwd = require("lazyvim.util").get_root() }) end, { desc = "gitui (root dir)" })
+  vim.keymap.set("n", "<leader>gg", function()
+    require("lazyvim.util").float_term({ "gitui" })
+  end, { desc = "gitui (cwd)" })
+  vim.keymap.set("n", "<leader>gG", function()
+    require("lazyvim.util").float_term({ "gitui" }, { cwd = require("lazyvim.util").get_root() })
+  end, { desc = "gitui (root dir)" })
 end
 
 if vim.fn.executable("btop") == 1 then
   -- btop
-  vim.keymap.set("n", "<leader>xb", function() require("lazyvim.util").float_term({ "btop" }) end, { desc = "btop" })
+  vim.keymap.set("n", "<leader>xb", function()
+    require("lazyvim.util").float_term({ "btop" })
+  end, { desc = "btop" })
 end
+
+-- make ctrl + backspace work
+vim.keymap.set("n", "<C-h>", "<C-W>")
+vim.keymap.set("n", "<C-BS>", "<C-W>")
+vim.keymap.set("n", "<M-BS>", "<C-W>")
+
+-- ctrl + backspace
+vim.keymap.set("i", "<C-H>", "<C-W>")
+-- when in visual mode, pasting will not overwrite the paste register
+vim.keymap.set("v", "<leader>p", '"_dP', { desc = "which_key_ignore" })
+
+vim.keymap.set(
+  { "n" },
+  "<leader>1",
+  "<Cmd>BufferLineGoToBuffer 1<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>2",
+  "<Cmd>BufferLineGoToBuffer 2<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>3",
+  "<Cmd>BufferLineGoToBuffer 3<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>4",
+  "<Cmd>BufferLineGoToBuffer 4<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>5",
+  "<Cmd>BufferLineGoToBuffer 5<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>6",
+  "<Cmd>BufferLineGoToBuffer 6<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>7",
+  "<Cmd>BufferLineGoToBuffer 7<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>8",
+  "<Cmd>BufferLineGoToBuffer 8<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>9",
+  "<Cmd>BufferLineGoToBuffer 9<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>$",
+  "<Cmd>BufferLineGoToBuffer -1<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+vim.keymap.set(
+  { "n" },
+  "<leader>0",
+  "<Cmd>BufferLineGoToBuffer -1<CR>",
+  { desc = "which_key_ignore", silent = true, noremap = true }
+)
+
+vim.keymap.set({ "n" }, "<leader>/", "<Plug>(comment_toggle_linewise_current)", { desc = "Comment linewise" })
+vim.keymap.set({ "x" }, "<leader>/", "<Plug>(comment_toggle_linewise_visual)", { desc = "Comment linewise" })
+vim.keymap.set({ "n" }, "<leader>f/", require("lazyvim.util").telescope("live_grep"), { desc = "Find in Files (Grep)" })
+
+vim.keymap.set({ "n" }, "<leader><tab>>", "<CMD>BufferLineMoveNext<CR>", { desc = "Move tab right" })
+vim.keymap.set({ "n" }, "<leader><tab><", "<CMD>BufferLineMovePrev<CR>", { desc = "Move tab right" })
+vim.keymap.set({ "n" }, ">b", "<CMD>BufferLineMoveNext<CR>", { desc = "Move tab right" })
+vim.keymap.set({ "n" }, "<b", "<CMD>BufferLineMovePrev<CR>", { desc = "Move tab left" })
+
+vim.keymap.set({ "n" }, "gS", "<Plug>(leap-from-window)", { desc = "Leap from window", noremap = false })
+
+vim.keymap.set({ "x" }, "s", [[:<C-u>lua require('mini.surround').add('visual')<CR>]], { noremap = false })
+vim.keymap.set({ "x" }, "gs", "<Plug>(leap-forward-to)", { desc = "Leap", noremap = false, silent = true })
+
+vim.keymap.set({ "n" }, "<F7>", "<cmd>ToggleTerm<cr>", { desc = "Toggle terminal" })
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/config/lazy.lua /home/stephen/.config/nvim/lua/config/lazy.lua
--- /home/stephen/code-monkey/Nv/lua/config/lazy.lua	2023-04-27 21:12:14.158409828 -0400
+++ /home/stephen/.config/nvim/lua/config/lazy.lua	2023-04-27 21:52:55.735952011 -0400
@@ -13,12 +13,14 @@
     -- lazyvim UI extension modules
     { import = "lazyvim.plugins.extras.ui.mini-animate" },
     -- lazyvim editor extension modules
     { import = "lazyvim.plugins.extras.util.project" },
     -- lazyvim dap core extension modules
     { import = "lazyvim.plugins.extras.dap.core" },
+    { import = "lazyvim.plugins.extras.lang.typescript" },
+    { import = "lazyvim.plugins.extras.lang.json" },
     -- lazyvim coding extension modules
     -- { import = "lazyvim.plugins.extras.coding.copilot" },
     -- import/override with your plugins
     { import = "plugins" },
   },
   defaults = {
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/config/options.lua /home/stephen/.config/nvim/lua/config/options.lua
--- /home/stephen/code-monkey/Nv/lua/config/options.lua	2023-02-16 20:22:47.390610931 -0500
+++ /home/stephen/.config/nvim/lua/config/options.lua	2023-04-27 21:52:58.054981974 -0400
@@ -9,7 +9,7 @@
 
 -- disable some fanzy UI stuff when run in Neovide
 if vim.g.neovide then
   vim.g.neovide_cursor_animation_length = 0
   vim.g.neovide_floating_blur = 0
   vim.g.neovide_floating_opacity = 90
-end
\ No newline at end of file
+end
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/coding.lua /home/stephen/.config/nvim/lua/plugins/coding.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/coding.lua	2023-04-27 21:12:14.158409828 -0400
+++ /home/stephen/.config/nvim/lua/plugins/coding.lua	2023-04-29 11:31:14.052064118 -0400
@@ -3,35 +3,58 @@
   -- extend auto completion
   {
     "hrsh7th/nvim-cmp",
     ---@param opts cmp.ConfigSchema
     opts = function(_, opts)
       local cmp = require("cmp")
+
+      -- I don't think this works...
       table.insert(cmp.mapping.preset, {
         ["<C-j>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
       })
       table.insert(cmp.mapping.preset, {
         ["<C-k>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
       })
+      -- table.insert(cmp.mapping.preset, {
+      --   ["<Tab>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
+      -- })
+      -- table.insert(cmp.mapping.preset, {
+      --   ["<S-Tab>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
+      -- })
+
+      -- takes a while to load...
+      opts.mapping = cmp.mapping.preset.insert({
+        ["<C-j>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
+        ["<C-k>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
+        ["<CR>"] = cmp.mapping.confirm({ select = true }),
+        ["<C-Space>"] = cmp.mapping.complete(),
+        -- -- gonna remove these cuz it'll be bad habits. This doesn't work for like 10 secs of starting nvim...
+        -- ["<S-Tab>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
+        -- ["<Tab>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
+      })
+
+      cmp.setup.filetype("markdown", {
+        enabled = false,
+      })
     end,
   },
 
   -- scopes
   {
     "tiagovla/scope.nvim",
     event = "VeryLazy",
-    config = true
+    config = true,
   },
 
   -- tidy
   {
     "mcauley-penney/tidy.nvim",
     event = "VeryLazy",
     config = {
       filetype_exclude = { "markdown", "diff" },
-    }
+    },
   },
 
   -- treesitter
   {
     "nvim-treesitter/nvim-treesitter",
     opts = function(_, opts)
@@ -43,29 +66,32 @@
         "dockerfile",
         "dot",
         "git_rebase",
         "gitattributes",
         "gitcommit",
         "gitignore",
-        "graphql",
-        "hcl",
+        -- "graphql",
+        -- "hcl",
         "http",
         "jq",
         "lua",
         "luadoc",
         "luap",
         "make",
         "markdown",
         "markdown_inline",
-        "mermaid",
+        -- "mermaid",
         "python",
         "query",
         "regex",
         "sql",
         "vim",
         "vimdoc",
-        "yaml"
+        "yaml",
+      }
+      opts.highlight = {
+        -- this is LAGGY AF
+        disable = { "markdown" },
       }
-    end
+    end,
   },
-
 }
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/colorscheme.lua /home/stephen/.config/nvim/lua/plugins/colorscheme.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/colorscheme.lua	2023-04-27 21:12:14.158409828 -0400
+++ /home/stephen/.config/nvim/lua/plugins/colorscheme.lua	1969-12-31 19:00:00.000000000 -0500
@@ -1,53 +0,0 @@
-return {
-
-  -- disable tokyonight
-  { "folke/tokyonight.nvim", enabled = false },
-
-  -- disable catppuccin
-  { "catppuccin/nvim", name = "catppuccin", enabled = false },
-
-  { "olimorris/onedarkpro.nvim" },
-
-  -- Configure LazyVim to load color scheme
-  {
-    "LazyVim/LazyVim",
-    opts = {
-      colorscheme = function()
-        local onedarkpro = require("onedarkpro")
-        local color = require("onedarkpro.helpers")
-        local colorscheme
-        if string.match(os.getenv("THEME"), "[L|l]ight") then
-          colorscheme = "onelight"
-          vim.o.background = "light"
-        else
-          colorscheme = "onedark_vivid"
-          vim.o.background = "dark"
-        end
-        local colors = color.get_colors(colorscheme)
-        local opts = {
-          theme = colorscheme,
-          styles = {
-            strings = "NONE", -- Style that is applied to strings
-            comments = "NONE", -- Style that is applied to comments
-            keywords = "NONE", -- Style that is applied to keywords
-            functions = "NONE", -- Style that is applied to functions
-            variables = "NONE", -- Style that is applied to variables
-          },
-          options = {
-            terminal_colors = true, -- Use the theme's colors for Neovim's :terminal?
-            cursorline = false, -- Use cursorline highlighting?
-          },
-          highlights = {
-            AlphaHeader = { fg = colors.yellow },
-            AlphaButtons = { fg = colors.fg },
-            AlphaShortcut = { fg = colors.red },
-            AlphaFooter = { fg = colors.highlight },
-          }
-        }
-        onedarkpro.setup(opts)
-        vim.cmd("colorscheme " .. colorscheme)
-      end
-    },
-  },
-
-}
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/editor.lua /home/stephen/.config/nvim/lua/plugins/editor.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/editor.lua	2023-04-27 21:12:14.158409828 -0400
+++ /home/stephen/.config/nvim/lua/plugins/editor.lua	2023-04-27 23:48:30.183096389 -0400
@@ -58,28 +58,28 @@
         prompt_prefix = " ",
         selection_caret = " ",
         layout_strategy = "vertical",
         layout_config = {
           vertical = {
             preview_cutoff = 0.2,
-            preview_height = 0.4
+            preview_height = 0.4,
           },
           height = 0.9,
-          width = 0.9
+          width = 0.9,
         },
         mappings = {
           i = {
             ["<C-j>"] = function(...)
               return require("telescope.actions").move_selection_next(...)
             end,
             ["<C-k>"] = function(...)
               return require("telescope.actions").move_selection_previous(...)
             end,
             ["<C-p>"] = function(...)
               return require("telescope.actions.layout").toggle_preview(...)
-            end
+            end,
           },
           n = {
             ["j"] = function(...)
               return require("telescope.actions").move_selection_next(...)
             end,
             ["k"] = function(...)
@@ -90,14 +90,14 @@
             end,
             ["G"] = function(...)
               return require("telescope.actions").move_to_bottom(...)
             end,
             ["<C-p>"] = function(...)
               return require("telescope.actions.layout").toggle_preview(...)
-            end
-          }
+            end,
+          },
         },
       },
       extensions = {
         undo = {
           use_delta = true,
           side_by_side = true,
@@ -112,25 +112,29 @@
       local telescope = require("telescope")
       telescope.setup(opts)
       telescope.load_extension("dap")
       telescope.load_extension("fzf")
       telescope.load_extension("undo")
     end,
+    keys = {
+      { "<leader><space>", false },
+    },
   },
 
   -- git blame
   {
     "f-person/git-blame.nvim",
     event = "BufReadPre",
+    enabled = false,
   },
 
   -- git conflict
   {
     "akinsho/git-conflict.nvim",
     event = "BufReadPre",
-    config = true
+    config = true,
   },
 
   -- add symbols-outline
   {
     "simrat39/symbols-outline.nvim",
     cmd = "SymbolsOutline",
@@ -161,21 +165,20 @@
           Key = { icon = icons.kinds.Key, hl = "TSType" },
           Null = { icon = icons.kinds.Null, hl = "TSType" },
           EnumMember = { icon = icons.kinds.EnumMember, hl = "TSField" },
           Struct = { icon = icons.kinds.Struct, hl = "TSType" },
           Event = { icon = icons.kinds.Event, hl = "TSType" },
           Operator = { icon = icons.kinds.Operator, hl = "TSOperator" },
-          TypeParameter = { icon = icons.kinds.TypeParameter, hl = "TSParameter" }
-        }
+          TypeParameter = { icon = icons.kinds.TypeParameter, hl = "TSParameter" },
+        },
       })
-    end
+    end,
   },
 
   -- add zen-mode
   {
     "folke/zen-mode.nvim",
     cmd = "ZenMode",
     config = true,
     keys = { { "<leader>z", "<cmd>ZenMode<cr>", desc = "Zen Mode" } },
   },
-
 }
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/extras/lang/rust.lua /home/stephen/.config/nvim/lua/plugins/extras/lang/rust.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/extras/lang/rust.lua	2023-04-27 21:12:14.159409841 -0400
+++ /home/stephen/.config/nvim/lua/plugins/extras/lang/rust.lua	2023-04-27 21:54:05.987859647 -0400
@@ -13,13 +13,13 @@
     ---@param opts cmp.ConfigSchema
     opts = function(_, opts)
       local cmp = require("cmp")
       opts.sources = cmp.config.sources(vim.list_extend(opts.sources, {
         { name = "crates" },
       }))
-    end
+    end,
   },
 
   -- add rust to treesitter
   {
     "nvim-treesitter/nvim-treesitter",
     opts = function(_, opts)
@@ -63,14 +63,16 @@
             tools = {
               hover_actions = {
                 auto_focus = false,
                 border = "none",
               },
               inlay_hints = {
-                auto = false,
+                auto = true,
                 show_parameter_hints = true,
+                parameter_hints_prefix = "  ",
+                other_hints_prefix = "  ",
               },
             },
             server = {
               settings = {
                 ["rust-analyzer"] = {
                   cargo = {
@@ -82,37 +84,37 @@
                     command = "clippy",
                     features = "all",
                   },
                   procMacro = {
                     enable = true,
                   },
-                }
-              }
-            }
+                },
+              },
+            },
           })
           if mason_registry.has_package("codelldb") then
             -- rust tools configuration for debugging support
             local codelldb = mason_registry.get_package("codelldb")
-            local extension_path = codelldb:get_install_path() .. '/extension/'
-            local codelldb_path = extension_path .. 'adapter/codelldb'
-            local liblldb_path = vim.fn.has "mac" == 1 and extension_path .. 'lldb/lib/liblldb.dylib' or
-                extension_path .. 'lldb/lib/liblldb.so'
+            local extension_path = codelldb:get_install_path() .. "/extension/"
+            local codelldb_path = extension_path .. "adapter/codelldb"
+            local liblldb_path = vim.fn.has("mac") == 1 and extension_path .. "lldb/lib/liblldb.dylib"
+              or extension_path .. "lldb/lib/liblldb.so"
 
             rust_tools_opts = vim.tbl_deep_extend("force", rust_tools_opts, {
               dap = {
-                adapter = require("rust-tools.dap").get_codelldb_adapter(codelldb_path, liblldb_path)
+                adapter = require("rust-tools.dap").get_codelldb_adapter(codelldb_path, liblldb_path),
               },
             })
           end
           require("rust-tools").setup(rust_tools_opts)
           return true
         end,
         taplo = function(_, _)
-          local crates = require('crates')
+          local crates = require("crates")
           local function show_documentation()
-            if vim.fn.expand('%:t') == 'Cargo.toml' and crates.popup_available() then
+            if vim.fn.expand("%:t") == "Cargo.toml" and crates.popup_available() then
               crates.show_popup()
             else
               vim.lsp.buf.hover()
             end
           end
           require("lazyvim.util").on_attach(function(client, buffer)
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/lang.lua /home/stephen/.config/nvim/lua/plugins/lang.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/lang.lua	2023-04-27 21:12:14.160409854 -0400
+++ /home/stephen/.config/nvim/lua/plugins/lang.lua	2023-04-27 21:54:37.745269950 -0400
@@ -16,65 +16,80 @@
   -- uncomment and add tools to ensure_installed below
   {
     "williamboman/mason.nvim",
     opts = {
       ensure_installed = {
         "lua-language-server",
-        "marksman"
+        "marksman",
       },
       ui = {
         icons = {
           package_installed = "✓",
           package_pending = "",
-          package_uninstalled = "✗"
-        }
-      }
+          package_uninstalled = "✗",
+        },
+      },
     },
   },
 
   -- disable the fancy UI for the debugger
   { "rcarriga/nvim-dap-ui", enabled = false },
 
   -- which key integration
   {
     "folke/which-key.nvim",
     opts = {
       defaults = {
         ["<leader>dw"] = { name = "+widgets" },
-      }
-    }
+      },
+    },
   },
 
   -- dap integration
   {
     "mfussenegger/nvim-dap",
     keys = {
-      { "<leader>de",
-        function() require("dap.ui.widgets").centered_float(require("dap.ui.widgets").expression, { border = "none" }) end,
+      {
+        "<leader>de",
+        function()
+          require("dap.ui.widgets").centered_float(require("dap.ui.widgets").expression, { border = "none" })
+        end,
         desc = "Eval",
-        mode = { "n", "v" } },
-      { "<leader>dwf",
-        function() require("dap.ui.widgets").centered_float(require("dap.ui.widgets").frames, { border = "none" }) end,
-        desc = "Frames" },
-      { "<leader>dws",
-        function() require("dap.ui.widgets").centered_float(require("dap.ui.widgets").scopes, { border = "none" }) end,
-        desc = "Scopes" },
-      { "<leader>dwt",
-        function() require("dap.ui.widgets").centered_float(require("dap.ui.widgets").threads, { border = "none" }) end,
-        desc = "Threads" },
+        mode = { "n", "v" },
+      },
+      {
+        "<leader>dwf",
+        function()
+          require("dap.ui.widgets").centered_float(require("dap.ui.widgets").frames, { border = "none" })
+        end,
+        desc = "Frames",
+      },
+      {
+        "<leader>dws",
+        function()
+          require("dap.ui.widgets").centered_float(require("dap.ui.widgets").scopes, { border = "none" })
+        end,
+        desc = "Scopes",
+      },
+      {
+        "<leader>dwt",
+        function()
+          require("dap.ui.widgets").centered_float(require("dap.ui.widgets").threads, { border = "none" })
+        end,
+        desc = "Threads",
+      },
     },
     opts = function(_, opts)
       require("dap").defaults.fallback.terminal_win_cmd = "enew | set filetype=dap-terminal"
-    end
+    end,
   },
 
   -- core language specific extension modules
   { import = "lazyvim.plugins.extras.lang.typescript" },
   { import = "lazyvim.plugins.extras.lang.json" },
   { import = "lazyvim.plugins.extras.dap.nlua" },
 
   -- custom language specific extension modules
   { import = "plugins.extras.lang.java" },
   { import = "plugins.extras.lang.rust" },
   { import = "plugins.extras.lang.nodejs" },
-
 }
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/personal.lua /home/stephen/.config/nvim/lua/plugins/personal.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/personal.lua	1969-12-31 19:00:00.000000000 -0500
+++ /home/stephen/.config/nvim/lua/plugins/personal.lua	2023-05-08 14:41:26.773706952 -0400
@@ -0,0 +1,92 @@
+-- Nv commit is 11832e3056908ffed1fd07a61291efdbec80c76c
+-- TODO
+-- tabbing for tab complete doesn't work initially. have to wait, or something. idk
+-- fix cursor color on white space before first character
+-- coding in latex, when i do a + <esc>, it would be really wonky sometimes. idk why
+return {
+  -- -- Doesn't seem to work with the keybindings...
+  -- { "kana/vim-textobj-user" },
+  -- {
+  --   "kana/vim-textobj-line",
+  --   dependencies = { "vim-textobj-user" },
+  -- },
+  {
+    "kmonad/kmonad-vim",
+  },
+  {
+    "folke/tokyonight.nvim",
+    opts = {
+      transparent = true,
+      styles = {
+        sidebars = "transparent",
+        floats = "transparent",
+      },
+      on_highlights = function(hl, _)
+        hl.CursorLineNr = {
+          fg = "#FFba00",
+        }
+        hl.LineNr = {
+          fg = "#5081c0",
+        }
+      end,
+    },
+  },
+  {
+    "nvim-treesitter/nvim-treesitter-context",
+    dependencies = "nvim-treesitter",
+  },
+  { "ggandor/flit.nvim", enabled = false },
+  {
+    "rhysd/clever-f.vim",
+  },
+  {
+    "numToStr/Comment.nvim",
+  },
+  {
+    "echasnovski/mini.surround",
+    opts = {
+      mappings = {
+        add = "gsa",
+        delete = "gsd",
+        find = "gsf",
+        find_left = "gsF",
+        highlight = "gsh",
+        replace = "gsr",
+        update_n_lines = "gsn",
+      },
+    },
+  },
+  {
+    "lervag/vimtex",
+  },
+  {
+    "ggandor/leap.nvim",
+    event = "VimEnter",
+    config = function()
+      require("leap").add_default_mappings()
+      vim.keymap.del({ "x" }, "x")
+      vim.keymap.del({ "x" }, "X")
+    end,
+  },
+  {
+    "folke/persistence.nvim",
+    opts = {
+      options = { "buffers", "curdir", "tabpages", "winsize", "globals" },
+    },
+  },
+  -- copied from AstroNvim
+  {
+    "akinsho/toggleterm.nvim",
+    cmd = { "ToggleTerm", "TermExec" },
+    opts = {
+      size = 10,
+      open_mapping = [[<F7>]],
+      shading_factor = 2,
+      direction = "float",
+      float_opts = {
+        border = "curved",
+        highlights = { border = "Normal", background = "Normal" },
+      },
+    },
+  },
+}
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/ui.lua /home/stephen/.config/nvim/lua/plugins/ui.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/ui.lua	2023-04-27 21:12:14.160409854 -0400
+++ /home/stephen/.config/nvim/lua/plugins/ui.lua	2023-04-27 21:54:42.875336230 -0400
@@ -4,13 +4,13 @@
   {
     "rcarriga/nvim-notify",
     opts = {
       stages = "fade_in_slide_out",
       timeout = 3000,
       render = "compact",
-    }
+    },
   },
 
   -- bufferline
   {
     "akinsho/bufferline.nvim",
     opts = {
@@ -26,13 +26,13 @@
         show_tab_indicators = true,
         separator_style = "thin", -- | "thick" | "thin" | { 'any', 'any' },
         color_icons = false,
         diagnostics = false,
         highlights = {
           buffer_selected = {
-            gui = "none"
+            gui = "none",
           },
         },
         offsets = {
           {
             filetype = "neo-tree",
             text = "Neo-tree",
@@ -40,17 +40,17 @@
             text_align = "left",
           },
           {
             filetype = "Outline",
             text = "Symbols Outline",
             highlight = "TSType",
-            text_align = "left"
-          }
-        }
-      }
-    }
+            text_align = "left",
+          },
+        },
+      },
+    },
   },
 
   -- statusline
   {
     "nvim-lualine/lualine.nvim",
     event = "VeryLazy",
@@ -83,13 +83,13 @@
             color = { gui = "none" },
           },
           { "progress", separator = " ", padding = { left = 1, right = 0 } },
           { "location", padding = { left = 0, right = 1 } },
         },
       })
-    end
+    end,
   },
 
   -- dashboard
   {
     "goolord/alpha-nvim",
     opts = function(_, dashboard)
@@ -110,21 +110,20 @@
         })
       end
       local button = dashboard.button("m", " " .. " Mason", ":Mason<CR>")
       button.opts.hl = "AlphaButtons"
       button.opts.hl_shortcut = "AlphaShortcut"
       table.insert(dashboard.section.buttons.val, 9, button)
-    end
+    end,
   },
 
   -- scrollbar for Neovim
   {
     "dstein64/nvim-scrollview",
     event = "BufReadPre",
     config = {
       excluded_filetypes = { "alpha", "neo-tree" },
       current_only = true,
       winblend = 75,
-    }
+    },
   },
-
 }
diff '--color=auto' --new-file --text --recursive '--unified=6' /home/stephen/code-monkey/Nv/lua/plugins/util.lua /home/stephen/.config/nvim/lua/plugins/util.lua
--- /home/stephen/code-monkey/Nv/lua/plugins/util.lua	2023-04-27 21:12:14.160409854 -0400
+++ /home/stephen/.config/nvim/lua/plugins/util.lua	2023-04-27 21:54:45.278367277 -0400
@@ -7,8 +7,7 @@
   },
 
   {
     "gennaro-tedesco/nvim-jqx",
     ft = { "json", "yaml" },
   },
-
 }
